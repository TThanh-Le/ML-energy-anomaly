# -*- coding: utf-8 -*-
"""merge

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q8X534XohGxwm9P7E4vi2vgsrUncW24T
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %pwd
# %cd drive/MyDrive/LEAD/

import pandas as pd
import pandas as pd
from sklearn.preprocessing import LabelEncoder

train_meta=pd.read_csv('train_meta.csv')
print("Cac gia tri bi thieu")
train_meta=train_meta.drop(columns=['site_id'])
train_meta.isnull().sum()

building_meta = pd.read_csv('building_metadata.csv')
print("Building_meta shape:", building_meta.shape)

years=building_meta['year_built'].unique()
print(years)

categories = train_org['primary_use'].unique()

print(categories)
categories.shape

train=pd.read_csv('train.csv')


train_metadata = pd.merge(train, building_metadata, on='building_id', how='left')

columns = [col for col in train_metadata.columns if col != 'anomaly'] + ['anomaly']
train_metadata = train_metadata[columns]

train_metadata.to_csv('train_meta.csv', index=False)

print("Kết quả đã được lưu vào file 'train_meta.csv'")

test=pd.read_csv('test.csv')


test_metadata = pd.merge(test, building_metadata, on='building_id', how='left')


test_metadata.to_csv('test_meta.csv', index=False)

print("Kết quả đã được lưu vào file 'test_meta.csv'")

train_meta=pd.read_csv('train_meta.csv')
categories = train_meta['primary_use'].unique()
print(categories)
categories.shape

test_meta=pd.read_csv('test_meta.csv')
categories = test_meta['primary_use'].unique()
print(categories)
categories.shape

train_meta.head()

test_meta.head()

#Ma hoa one-hot (train)

train=pd.read_csv('train_meta.csv')
train=pd.get_dummies(train,columns=['primary_use'], drop_first=False)
train[train.select_dtypes(include=['bool']).columns] = train.select_dtypes(include=['bool']).astype(int)

train = train.drop(columns=['site_id'])

train.head()

columns=[col for col in train.columns if col!='anomaly']+['anomaly']
train=train[columns]

train.to_csv('train_meta_one-hot.csv', index=False)

#Ma hoa Label (train)

train=pd.read_csv('train_meta.csv')

label_encoder = LabelEncoder()
train['primary_use_label'] = label_encoder.fit_transform(train['primary_use'])

columns = [col for col in train.columns if col != 'anomaly'] + ['anomaly']
train = train[columns]

train = train.drop(columns=['site_id','primary_use'])

train['meter_reading_missing'] = train['meter_reading'].isnull().astype(int)
train['year_built_missing'] = train['year_built'].isnull().astype(int)
train['floor_count_missing'] = train['floor_count'].isnull().astype(int)

train['meter_reading'] = train['meter_reading'].fillna(0)
train['year_built'] = train['year_built'].fillna(train['year_built'].median())
train['floor_count'] = train['floor_count'].fillna(1)

print(train[['meter_reading', 'year_built', 'floor_count']].isnull().sum())

print(train.head())

train.to_csv('train_meta_label.csv', index=False)

#Ma hoa Label (test)

test=pd.read_csv('test_meta.csv')

label_encoder = LabelEncoder()
test['primary_use_label'] = label_encoder.fit_transform(test['primary_use'])



test = test.drop(columns=['site_id','primary_use'])

test['meter_reading_missing'] = test['meter_reading'].isnull().astype(int)
test['year_built_missing'] = test['year_built'].isnull().astype(int)
test['floor_count_missing'] = test['floor_count'].isnull().astype(int)

test['meter_reading'] = test['meter_reading'].fillna(0)
test['year_built'] = test['year_built'].fillna(test_meta['year_built'].median())
test['floor_count'] = test['floor_count'].fillna(1)

print(test[['meter_reading', 'year_built', 'floor_count']].isnull().sum())

print(test.head())

test.to_csv('test_meta_label.csv', index=False)

"""**DRAFT**"""

import random

test_index = random.randint(0, len(X_val) - 1)

choose_model = 0  # 0: XGBoost, 1: Logistic Regression, 2: ANN

y_actual = Y_val.iloc[test_index]

model, model_name = models[choose_model]

if model_name == 'ANN':
    y_predict = model.predict(X_val[test_index].reshape(1, -1))[0]
    if y_predict.ndim == 2:
        y_predict = y_predict[0]
elif model_name == 'logistic':
    y_predict = model.predict(X_val[test_index].reshape(1, -1))[0]
else:  # XGBoost
    y_predict = model.predict_proba(X_val[test_index].reshape(1, -1))[0, 1]



building_id = X_val_temp['building_id'].iloc[test_index]
meter_reading = X_val_temp['meter_reading'].iloc[test_index]
time = X_val_temp['time'].iloc[test_index]
month = X_val_temp['month'].iloc[test_index]
day = X_val_temp['day'].iloc[test_index]


if choose_model == 0:
    predict_result = "Bất thường" if y_predict > 0.5 else "Bình thường"
    print('Phát hiện bất thường với mô hình XGBoost')
elif choose_model == 1:
    predict_result = "Bất thường" if y_predict > 0.5 else "Bình thường"
    print('Phát hiện bất thường với mô hình hồi quy Logistic')
else:
    predict_result = "Bất thường" if y_predict > 0.6 else "Bình thường"
    print('Phát hiện bất thường với mô hình ANN')

print(y_predict)

# In kết quả
print(f'Tòa nhà {building_id} vào lúc {time}:00 ngày {day}/{month} có chỉ số thu được là {meter_reading}')
print(f'Dự đoán: {predict_result}')
print(f'Trạng thái thực tế: {"Bất thường" if y_actual == 1 else "Bình thường"}')